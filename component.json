{
    "title": "Medium.com",
    "description": "Medium's unofficial API documentation using OpenAPI specification.\n\n# Official API\nOfficial API document can also be viewed for most up to date API spec at [https://github.com/Medium/medium-api-docs](https://github.com/Medium/medium-api-docs).\n\nDeveloper Blog - [Welcome to the Medium API](https://medium.com/blog/welcome-to-the-medium-api-3418f956552)\n",
    "docsUrl": "https://github.com/Medium/medium-api-docs",
    "url": "https://api.apis.guru/v2/specs/medium.com/1.0.0/swagger.json",
    "envVars": {
        "OAUTH_CLIENT_ID": {
            "description": "OAuth Client ID"
        },
        "OAUTH_CLIENT_SECRET": {
            "description": "OAuth Client Secret"
        }
    },
    "credentials": {
        "fields": {
            "server": {
                "label": "Server",
                "viewClass": "SelectView",
                "model": [
                    "https://api.medium.com/v1",
                    "--- Custom URL"
                ],
                "required": true
            },
            "otherServer": {
                "label": "Custom Server URL",
                "viewClass": "TextFieldView"
            },
            "BearerToken": {
                "label": "Authorization (BearerToken)",
                "viewClass": "TextFieldView",
                "note": "Self-issued access tokens (described in user-facing copy as integration tokens) are explicitly designed for desktop integrations where implementing browser-based authentication is non-trivial, or software like plugins where it is impossible to secure a client secret. You should not request that a user give you an integration token if you don't meet these criteria. Users will be cautioned within Medium to treat integration tokens like passwords, and dissuaded from making them generally available.\n\nUsers can generate an access token from the [Settings page](https://medium.com/me/settings) of their Medium account.\n\nYou should instruct your user to visit this URL and generate an integration token from the Integration Tokens section. You should suggest a description for this token - typically the name of your product or feature - and use it consistently for all users.\n\nSelf-issued access tokens currently grant the `basicProfile` and `publishPost` scope. A future iteration of the API will require a user to select the scope they wish to grant access to.\n\nSelf-issued access tokens do not expire, though they may be revoked by the user at any time.\n"
            },
            "OauthSecurity": {
                "label": "First you must register an application on Medium. Then we will supply you a clientId and a clientSecret with which you may access Medium's API. Each integration should have its own clientId and clientSecret. The clientSecret should be treated like a password and stored securely.",
                "viewClass": "OAuthFieldView"
            }
        },
        "oauth2": {
            "client_id": "{{OAUTH_CLIENT_ID}}",
            "client_secret": "{{OAUTH_CLIENT_SECRET}}",
            "auth_uri": "https://medium.com/m/oauth/authorize",
            "token_uri": "https://medium.com/v1/tokens"
        }
    },
    "triggers": {
        "startFlow": {
            "main": "./lib/triggers/startFlow.js",
            "type": "polling",
            "title": "Start Flow",
            "fields": {}
        }
    },
    "actions": {
        "get_me": {
            "main": "./lib/actions/get_me.js",
            "title": "User details",
            "description": "Returns details of the user who has granted permission to the application.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/get_me.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "get_publications__publicationId__contributors": {
            "main": "./lib/actions/get_publications__publicationId__contributors.js",
            "title": "Contributors of Publication",
            "description": "This endpoint returns a list of contributors for a given publication. In other words, a list of Medium users who are allowed to publish under a publication, as well as a description of their exact role in the publication (for now, either an editor or a writer).",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/get_publications__publicationId__contributors.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "post_publications__publicationId__posts": {
            "main": "./lib/actions/post_publications__publicationId__posts.js",
            "title": "Create Publication Post",
            "description": "creating a post and associating it with a publication on Medium. The request also shows this association, considering posts a collection of resources under a publication\n\nThere are additional rules around publishing that each request to this API must respect:\n  - If the authenticated user is an 'editor' for the publication, they can create posts with any publish status. Posts published as 'public' or 'unlisted' will appear in collection immediately, while posts created as 'draft' will remain in pending state under publication.\n  - If the authenticated user is a 'writer' for the chosen publication, they can only create a post as a 'draft'. That post will remain in pending state under publication until an editor for the publication approves it.\n  - If the authenticated user is neither a 'writer' nor an 'editor', they are not allowed to create any posts in a publication.\n",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/post_publications__publicationId__posts.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "post_users__authorId__posts": {
            "main": "./lib/actions/post_users__authorId__posts.js",
            "title": "Create User Post",
            "description": "Creates a post on the authenticated user's profile.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/post_users__authorId__posts.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "get_users__userId__publications": {
            "main": "./lib/actions/get_users__userId__publications.js",
            "title": "User's publications",
            "description": "Returns a full list of publications that the user is related to in some way. This includes all publications the user is subscribed to, writes to, or edits.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/get_users__userId__publications.in.json",
                "out": {
                    "type": "object"
                }
            }
        }
    }
}